# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gauss', [dirname(__file__)])
        except ImportError:
            import _gauss
            return _gauss
        if fp is not None:
            try:
                _mod = imp.load_module('_gauss', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gauss = swig_import_helper()
    del swig_import_helper
else:
    import _gauss
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gauss.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gauss.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gauss.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gauss.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gauss.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gauss.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gauss.SwigPyIterator_copy(self)

    def next(self):
        return _gauss.SwigPyIterator_next(self)

    def __next__(self):
        return _gauss.SwigPyIterator___next__(self)

    def previous(self):
        return _gauss.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gauss.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gauss.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gauss.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gauss.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gauss.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gauss.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gauss.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gauss.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gauss.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gauss.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _gauss.DoubleVector___bool__(self)

    def __len__(self):
        return _gauss.DoubleVector___len__(self)

    def pop(self):
        return _gauss.DoubleVector_pop(self)

    def __getslice__(self, i, j):
        return _gauss.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gauss.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gauss.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gauss.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gauss.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gauss.DoubleVector___setitem__(self, *args)

    def append(self, x):
        return _gauss.DoubleVector_append(self, x)

    def empty(self):
        return _gauss.DoubleVector_empty(self)

    def size(self):
        return _gauss.DoubleVector_size(self)

    def clear(self):
        return _gauss.DoubleVector_clear(self)

    def swap(self, v):
        return _gauss.DoubleVector_swap(self, v)

    def get_allocator(self):
        return _gauss.DoubleVector_get_allocator(self)

    def begin(self):
        return _gauss.DoubleVector_begin(self)

    def end(self):
        return _gauss.DoubleVector_end(self)

    def rbegin(self):
        return _gauss.DoubleVector_rbegin(self)

    def rend(self):
        return _gauss.DoubleVector_rend(self)

    def pop_back(self):
        return _gauss.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _gauss.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _gauss.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _gauss.DoubleVector_push_back(self, x)

    def front(self):
        return _gauss.DoubleVector_front(self)

    def back(self):
        return _gauss.DoubleVector_back(self)

    def assign(self, n, x):
        return _gauss.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _gauss.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _gauss.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _gauss.DoubleVector_reserve(self, n)

    def capacity(self):
        return _gauss.DoubleVector_capacity(self)
    __swig_destroy__ = _gauss.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _gauss.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleDoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gauss.DoubleDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gauss.DoubleDoubleVector___nonzero__(self)

    def __bool__(self):
        return _gauss.DoubleDoubleVector___bool__(self)

    def __len__(self):
        return _gauss.DoubleDoubleVector___len__(self)

    def pop(self):
        return _gauss.DoubleDoubleVector_pop(self)

    def __getslice__(self, i, j):
        return _gauss.DoubleDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gauss.DoubleDoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gauss.DoubleDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gauss.DoubleDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gauss.DoubleDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gauss.DoubleDoubleVector___setitem__(self, *args)

    def append(self, x):
        return _gauss.DoubleDoubleVector_append(self, x)

    def empty(self):
        return _gauss.DoubleDoubleVector_empty(self)

    def size(self):
        return _gauss.DoubleDoubleVector_size(self)

    def clear(self):
        return _gauss.DoubleDoubleVector_clear(self)

    def swap(self, v):
        return _gauss.DoubleDoubleVector_swap(self, v)

    def get_allocator(self):
        return _gauss.DoubleDoubleVector_get_allocator(self)

    def begin(self):
        return _gauss.DoubleDoubleVector_begin(self)

    def end(self):
        return _gauss.DoubleDoubleVector_end(self)

    def rbegin(self):
        return _gauss.DoubleDoubleVector_rbegin(self)

    def rend(self):
        return _gauss.DoubleDoubleVector_rend(self)

    def pop_back(self):
        return _gauss.DoubleDoubleVector_pop_back(self)

    def erase(self, *args):
        return _gauss.DoubleDoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _gauss.new_DoubleDoubleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _gauss.DoubleDoubleVector_push_back(self, x)

    def front(self):
        return _gauss.DoubleDoubleVector_front(self)

    def back(self):
        return _gauss.DoubleDoubleVector_back(self)

    def assign(self, n, x):
        return _gauss.DoubleDoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _gauss.DoubleDoubleVector_resize(self, *args)

    def insert(self, *args):
        return _gauss.DoubleDoubleVector_insert(self, *args)

    def reserve(self, n):
        return _gauss.DoubleDoubleVector_reserve(self, n)

    def capacity(self):
        return _gauss.DoubleDoubleVector_capacity(self)
    __swig_destroy__ = _gauss.delete_DoubleDoubleVector
    __del__ = lambda self: None
DoubleDoubleVector_swigregister = _gauss.DoubleDoubleVector_swigregister
DoubleDoubleVector_swigregister(DoubleDoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gauss.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gauss.FloatVector___nonzero__(self)

    def __bool__(self):
        return _gauss.FloatVector___bool__(self)

    def __len__(self):
        return _gauss.FloatVector___len__(self)

    def pop(self):
        return _gauss.FloatVector_pop(self)

    def __getslice__(self, i, j):
        return _gauss.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gauss.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gauss.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gauss.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gauss.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gauss.FloatVector___setitem__(self, *args)

    def append(self, x):
        return _gauss.FloatVector_append(self, x)

    def empty(self):
        return _gauss.FloatVector_empty(self)

    def size(self):
        return _gauss.FloatVector_size(self)

    def clear(self):
        return _gauss.FloatVector_clear(self)

    def swap(self, v):
        return _gauss.FloatVector_swap(self, v)

    def get_allocator(self):
        return _gauss.FloatVector_get_allocator(self)

    def begin(self):
        return _gauss.FloatVector_begin(self)

    def end(self):
        return _gauss.FloatVector_end(self)

    def rbegin(self):
        return _gauss.FloatVector_rbegin(self)

    def rend(self):
        return _gauss.FloatVector_rend(self)

    def pop_back(self):
        return _gauss.FloatVector_pop_back(self)

    def erase(self, *args):
        return _gauss.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _gauss.new_FloatVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _gauss.FloatVector_push_back(self, x)

    def front(self):
        return _gauss.FloatVector_front(self)

    def back(self):
        return _gauss.FloatVector_back(self)

    def assign(self, n, x):
        return _gauss.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _gauss.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _gauss.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _gauss.FloatVector_reserve(self, n)

    def capacity(self):
        return _gauss.FloatVector_capacity(self)
    __swig_destroy__ = _gauss.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _gauss.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gauss.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gauss.IntVector___nonzero__(self)

    def __bool__(self):
        return _gauss.IntVector___bool__(self)

    def __len__(self):
        return _gauss.IntVector___len__(self)

    def pop(self):
        return _gauss.IntVector_pop(self)

    def __getslice__(self, i, j):
        return _gauss.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gauss.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gauss.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gauss.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gauss.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gauss.IntVector___setitem__(self, *args)

    def append(self, x):
        return _gauss.IntVector_append(self, x)

    def empty(self):
        return _gauss.IntVector_empty(self)

    def size(self):
        return _gauss.IntVector_size(self)

    def clear(self):
        return _gauss.IntVector_clear(self)

    def swap(self, v):
        return _gauss.IntVector_swap(self, v)

    def get_allocator(self):
        return _gauss.IntVector_get_allocator(self)

    def begin(self):
        return _gauss.IntVector_begin(self)

    def end(self):
        return _gauss.IntVector_end(self)

    def rbegin(self):
        return _gauss.IntVector_rbegin(self)

    def rend(self):
        return _gauss.IntVector_rend(self)

    def pop_back(self):
        return _gauss.IntVector_pop_back(self)

    def erase(self, *args):
        return _gauss.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _gauss.new_IntVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _gauss.IntVector_push_back(self, x)

    def front(self):
        return _gauss.IntVector_front(self)

    def back(self):
        return _gauss.IntVector_back(self)

    def assign(self, n, x):
        return _gauss.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _gauss.IntVector_resize(self, *args)

    def insert(self, *args):
        return _gauss.IntVector_insert(self, *args)

    def reserve(self, n):
        return _gauss.IntVector_reserve(self, n)

    def capacity(self):
        return _gauss.IntVector_capacity(self)
    __swig_destroy__ = _gauss.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _gauss.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gauss.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gauss.StringVector___nonzero__(self)

    def __bool__(self):
        return _gauss.StringVector___bool__(self)

    def __len__(self):
        return _gauss.StringVector___len__(self)

    def pop(self):
        return _gauss.StringVector_pop(self)

    def __getslice__(self, i, j):
        return _gauss.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gauss.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gauss.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gauss.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gauss.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gauss.StringVector___setitem__(self, *args)

    def append(self, x):
        return _gauss.StringVector_append(self, x)

    def empty(self):
        return _gauss.StringVector_empty(self)

    def size(self):
        return _gauss.StringVector_size(self)

    def clear(self):
        return _gauss.StringVector_clear(self)

    def swap(self, v):
        return _gauss.StringVector_swap(self, v)

    def get_allocator(self):
        return _gauss.StringVector_get_allocator(self)

    def begin(self):
        return _gauss.StringVector_begin(self)

    def end(self):
        return _gauss.StringVector_end(self)

    def rbegin(self):
        return _gauss.StringVector_rbegin(self)

    def rend(self):
        return _gauss.StringVector_rend(self)

    def pop_back(self):
        return _gauss.StringVector_pop_back(self)

    def erase(self, *args):
        return _gauss.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _gauss.new_StringVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _gauss.StringVector_push_back(self, x)

    def front(self):
        return _gauss.StringVector_front(self)

    def back(self):
        return _gauss.StringVector_back(self)

    def assign(self, n, x):
        return _gauss.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _gauss.StringVector_resize(self, *args)

    def insert(self, *args):
        return _gauss.StringVector_insert(self, *args)

    def reserve(self, n):
        return _gauss.StringVector_reserve(self, n)

    def capacity(self):
        return _gauss.StringVector_capacity(self)
    __swig_destroy__ = _gauss.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _gauss.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringStringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gauss.StringStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gauss.StringStringVector___nonzero__(self)

    def __bool__(self):
        return _gauss.StringStringVector___bool__(self)

    def __len__(self):
        return _gauss.StringStringVector___len__(self)

    def pop(self):
        return _gauss.StringStringVector_pop(self)

    def __getslice__(self, i, j):
        return _gauss.StringStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gauss.StringStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gauss.StringStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gauss.StringStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gauss.StringStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gauss.StringStringVector___setitem__(self, *args)

    def append(self, x):
        return _gauss.StringStringVector_append(self, x)

    def empty(self):
        return _gauss.StringStringVector_empty(self)

    def size(self):
        return _gauss.StringStringVector_size(self)

    def clear(self):
        return _gauss.StringStringVector_clear(self)

    def swap(self, v):
        return _gauss.StringStringVector_swap(self, v)

    def get_allocator(self):
        return _gauss.StringStringVector_get_allocator(self)

    def begin(self):
        return _gauss.StringStringVector_begin(self)

    def end(self):
        return _gauss.StringStringVector_end(self)

    def rbegin(self):
        return _gauss.StringStringVector_rbegin(self)

    def rend(self):
        return _gauss.StringStringVector_rend(self)

    def pop_back(self):
        return _gauss.StringStringVector_pop_back(self)

    def erase(self, *args):
        return _gauss.StringStringVector_erase(self, *args)

    def __init__(self, *args):
        this = _gauss.new_StringStringVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _gauss.StringStringVector_push_back(self, x)

    def front(self):
        return _gauss.StringStringVector_front(self)

    def back(self):
        return _gauss.StringStringVector_back(self)

    def assign(self, n, x):
        return _gauss.StringStringVector_assign(self, n, x)

    def resize(self, *args):
        return _gauss.StringStringVector_resize(self, *args)

    def insert(self, *args):
        return _gauss.StringStringVector_insert(self, *args)

    def reserve(self, n):
        return _gauss.StringStringVector_reserve(self, n)

    def capacity(self):
        return _gauss.StringStringVector_capacity(self)
    __swig_destroy__ = _gauss.delete_StringStringVector
    __del__ = lambda self: None
StringStringVector_swigregister = _gauss.StringStringVector_swigregister
StringStringVector_swigregister(StringStringVector)

class GAUSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GAUSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GAUSS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gauss.new_GAUSS(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gauss.delete_GAUSS
    __del__ = lambda self: None

    def initialize(self):
        return _gauss.GAUSS_initialize(self)

    def shutdown(self):
        return _gauss.GAUSS_shutdown(self)

    def setHome(self, arg2):
        return _gauss.GAUSS_setHome(self, arg2)

    def setHomeVar(self, arg2):
        return _gauss.GAUSS_setHomeVar(self, arg2)

    def getHome(self):
        return _gauss.GAUSS_getHome(self)

    def getHomeVar(self):
        return _gauss.GAUSS_getHomeVar(self)

    def getLogFile(self):
        return _gauss.GAUSS_getLogFile(self)

    def setLogFile(self, arg2, arg3):
        return _gauss.GAUSS_setLogFile(self, arg2, arg3)

    def getLastErrorText(self):
        return _gauss.GAUSS_getLastErrorText(self)

    def getErrorText(self, arg2):
        return _gauss.GAUSS_getErrorText(self, arg2)

    def getError(self):
        return _gauss.GAUSS_getError(self)

    def setError(self, arg2):
        return _gauss.GAUSS_setError(self, arg2)

    def createWorkspace(self, arg2):
        return _gauss.GAUSS_createWorkspace(self, arg2)

    def destroyWorkspace(self, arg2):
        return _gauss.GAUSS_destroyWorkspace(self, arg2)

    def destroyAllWorkspaces(self):
        return _gauss.GAUSS_destroyAllWorkspaces(self)

    def getWorkspace(self, arg2):
        return _gauss.GAUSS_getWorkspace(self, arg2)

    def getActiveWorkspace(self):
        return _gauss.GAUSS_getActiveWorkspace(self)

    def setActiveWorkspace(self, arg2):
        return _gauss.GAUSS_setActiveWorkspace(self, arg2)

    def loadWorkspace(self, arg2):
        return _gauss.GAUSS_loadWorkspace(self, arg2)

    def getWorkspaceName(self, arg2):
        return _gauss.GAUSS_getWorkspaceName(self, arg2)

    def updateWorkspaceName(self, arg2):
        return _gauss.GAUSS_updateWorkspaceName(self, arg2)

    def saveWorkspace(self, arg2, arg3):
        return _gauss.GAUSS_saveWorkspace(self, arg2, arg3)

    def saveProgram(self, arg2, arg3):
        return _gauss.GAUSS_saveProgram(self, arg2, arg3)

    def translateDataloopFile(self, srcfile):
        return _gauss.GAUSS_translateDataloopFile(self, srcfile)

    def executeString(self, *args):
        return _gauss.GAUSS_executeString(self, *args)

    def executeFile(self, *args):
        return _gauss.GAUSS_executeFile(self, *args)

    def executeCompiledFile(self, *args):
        return _gauss.GAUSS_executeCompiledFile(self, *args)

    def compileString(self, *args):
        return _gauss.GAUSS_compileString(self, *args)

    def compileFile(self, *args):
        return _gauss.GAUSS_compileFile(self, *args)

    def loadCompiledFile(self, *args):
        return _gauss.GAUSS_loadCompiledFile(self, *args)

    def executeProgram(self, arg2):
        return _gauss.GAUSS_executeProgram(self, arg2)

    def freeProgram(self, arg2):
        return _gauss.GAUSS_freeProgram(self, arg2)

    def makePathAbsolute(self, arg2):
        return _gauss.GAUSS_makePathAbsolute(self, arg2)

    def programInputString(self):
        return _gauss.GAUSS_programInputString(self)

    def getSymbolType(self, *args):
        return _gauss.GAUSS_getSymbolType(self, *args)

    def getScalar(self, *args):
        return _gauss.GAUSS_getScalar(self, *args)

    def getMatrix(self, *args):
        return _gauss.GAUSS_getMatrix(self, *args)

    def getMatrixAndClear(self, *args):
        return _gauss.GAUSS_getMatrixAndClear(self, *args)

    def getArray(self, *args):
        return _gauss.GAUSS_getArray(self, *args)

    def getArrayAndClear(self, *args):
        return _gauss.GAUSS_getArrayAndClear(self, *args)

    def getString(self, *args):
        return _gauss.GAUSS_getString(self, *args)

    def getStringArray(self, *args):
        return _gauss.GAUSS_getStringArray(self, *args)

    def setSymbol(self, *args):
        return _gauss.GAUSS_setSymbol(self, *args)

    def isMissingValue(self, arg2):
        return _gauss.GAUSS_isMissingValue(self, arg2)
    __swig_setmethods__["kMissingValue"] = _gauss.GAUSS_kMissingValue_set
    __swig_getmethods__["kMissingValue"] = _gauss.GAUSS_kMissingValue_get
    if _newclass:
        kMissingValue = _swig_property(_gauss.GAUSS_kMissingValue_get, _gauss.GAUSS_kMissingValue_set)
    __swig_getmethods__["internalHookOutput"] = lambda x: _gauss.GAUSS_internalHookOutput
    if _newclass:
        internalHookOutput = staticmethod(_gauss.GAUSS_internalHookOutput)
    __swig_getmethods__["internalHookError"] = lambda x: _gauss.GAUSS_internalHookError
    if _newclass:
        internalHookError = staticmethod(_gauss.GAUSS_internalHookError)
    __swig_getmethods__["internalHookFlush"] = lambda x: _gauss.GAUSS_internalHookFlush
    if _newclass:
        internalHookFlush = staticmethod(_gauss.GAUSS_internalHookFlush)
    __swig_getmethods__["internalHookInputString"] = lambda x: _gauss.GAUSS_internalHookInputString
    if _newclass:
        internalHookInputString = staticmethod(_gauss.GAUSS_internalHookInputString)
    __swig_getmethods__["internalHookInputChar"] = lambda x: _gauss.GAUSS_internalHookInputChar
    if _newclass:
        internalHookInputChar = staticmethod(_gauss.GAUSS_internalHookInputChar)
    __swig_getmethods__["internalHookInputBlockingChar"] = lambda x: _gauss.GAUSS_internalHookInputBlockingChar
    if _newclass:
        internalHookInputBlockingChar = staticmethod(_gauss.GAUSS_internalHookInputBlockingChar)
    __swig_getmethods__["internalHookInputCheck"] = lambda x: _gauss.GAUSS_internalHookInputCheck
    if _newclass:
        internalHookInputCheck = staticmethod(_gauss.GAUSS_internalHookInputCheck)

    def getOutput(self):
        return _gauss.GAUSS_getOutput(self)

    def clearOutput(self):
        return _gauss.GAUSS_clearOutput(self)

    def getErrorOutput(self):
        return _gauss.GAUSS_getErrorOutput(self)

    def clearErrorOutput(self):
        return _gauss.GAUSS_clearErrorOutput(self)

    def setProgramOutputAll(self, func):
        return _gauss.GAUSS_setProgramOutputAll(self, func)

    def setProgramOutput(self, func):
        return _gauss.GAUSS_setProgramOutput(self, func)

    def setProgramErrorOutput(self, func):
        return _gauss.GAUSS_setProgramErrorOutput(self, func)

    def setProgramFlushOutput(self, func):
        return _gauss.GAUSS_setProgramFlushOutput(self, func)

    def setProgramInputString(self, func):
        return _gauss.GAUSS_setProgramInputString(self, func)

    def setProgramInputChar(self, func):
        return _gauss.GAUSS_setProgramInputChar(self, func)

    def setProgramInputCharBlocking(self, func):
        return _gauss.GAUSS_setProgramInputCharBlocking(self, func)

    def setProgramInputCheck(self, func):
        return _gauss.GAUSS_setProgramInputCheck(self, func)
    __swig_setmethods__["outputFunc_"] = _gauss.GAUSS_outputFunc__set
    __swig_getmethods__["outputFunc_"] = _gauss.GAUSS_outputFunc__get
    if _newclass:
        outputFunc_ = _swig_property(_gauss.GAUSS_outputFunc__get, _gauss.GAUSS_outputFunc__set)
    __swig_setmethods__["errorFunc_"] = _gauss.GAUSS_errorFunc__set
    __swig_getmethods__["errorFunc_"] = _gauss.GAUSS_errorFunc__get
    if _newclass:
        errorFunc_ = _swig_property(_gauss.GAUSS_errorFunc__get, _gauss.GAUSS_errorFunc__set)
    __swig_setmethods__["flushFunc_"] = _gauss.GAUSS_flushFunc__set
    __swig_getmethods__["flushFunc_"] = _gauss.GAUSS_flushFunc__get
    if _newclass:
        flushFunc_ = _swig_property(_gauss.GAUSS_flushFunc__get, _gauss.GAUSS_flushFunc__set)
    __swig_setmethods__["inputStringFunc_"] = _gauss.GAUSS_inputStringFunc__set
    __swig_getmethods__["inputStringFunc_"] = _gauss.GAUSS_inputStringFunc__get
    if _newclass:
        inputStringFunc_ = _swig_property(_gauss.GAUSS_inputStringFunc__get, _gauss.GAUSS_inputStringFunc__set)
    __swig_setmethods__["inputCharFunc_"] = _gauss.GAUSS_inputCharFunc__set
    __swig_getmethods__["inputCharFunc_"] = _gauss.GAUSS_inputCharFunc__get
    if _newclass:
        inputCharFunc_ = _swig_property(_gauss.GAUSS_inputCharFunc__get, _gauss.GAUSS_inputCharFunc__set)
    __swig_setmethods__["inputBlockingCharFunc_"] = _gauss.GAUSS_inputBlockingCharFunc__set
    __swig_getmethods__["inputBlockingCharFunc_"] = _gauss.GAUSS_inputBlockingCharFunc__get
    if _newclass:
        inputBlockingCharFunc_ = _swig_property(_gauss.GAUSS_inputBlockingCharFunc__get, _gauss.GAUSS_inputBlockingCharFunc__set)
    __swig_setmethods__["inputCheckFunc_"] = _gauss.GAUSS_inputCheckFunc__set
    __swig_getmethods__["inputCheckFunc_"] = _gauss.GAUSS_inputCheckFunc__get
    if _newclass:
        inputCheckFunc_ = _swig_property(_gauss.GAUSS_inputCheckFunc__get, _gauss.GAUSS_inputCheckFunc__set)
GAUSS_swigregister = _gauss.GAUSS_swigregister
GAUSS_swigregister(GAUSS)
cvar = _gauss.cvar

def GAUSS_internalHookOutput(output):
    return _gauss.GAUSS_internalHookOutput(output)
GAUSS_internalHookOutput = _gauss.GAUSS_internalHookOutput

def GAUSS_internalHookError(output):
    return _gauss.GAUSS_internalHookError(output)
GAUSS_internalHookError = _gauss.GAUSS_internalHookError

def GAUSS_internalHookFlush():
    return _gauss.GAUSS_internalHookFlush()
GAUSS_internalHookFlush = _gauss.GAUSS_internalHookFlush

def GAUSS_internalHookInputString(buf, len):
    return _gauss.GAUSS_internalHookInputString(buf, len)
GAUSS_internalHookInputString = _gauss.GAUSS_internalHookInputString

def GAUSS_internalHookInputChar():
    return _gauss.GAUSS_internalHookInputChar()
GAUSS_internalHookInputChar = _gauss.GAUSS_internalHookInputChar

def GAUSS_internalHookInputBlockingChar():
    return _gauss.GAUSS_internalHookInputBlockingChar()
GAUSS_internalHookInputBlockingChar = _gauss.GAUSS_internalHookInputBlockingChar

def GAUSS_internalHookInputCheck():
    return _gauss.GAUSS_internalHookInputCheck()
GAUSS_internalHookInputCheck = _gauss.GAUSS_internalHookInputCheck

class GESymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GESymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GESymbol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getRows(self):
        return _gauss.GESymbol_getRows(self)

    def getCols(self):
        return _gauss.GESymbol_getCols(self)

    def isComplex(self):
        return _gauss.GESymbol_isComplex(self)

    def size(self):
        return _gauss.GESymbol_size(self)

    def clear(self):
        return _gauss.GESymbol_clear(self)

    def toString(self):
        return _gauss.GESymbol_toString(self)

    def __str__(self):
        return _gauss.GESymbol___str__(self)
GESymbol_swigregister = _gauss.GESymbol_swigregister
GESymbol_swigregister(GESymbol)

class GEArray(GESymbol):
    __swig_setmethods__ = {}
    for _s in [GESymbol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GEArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GESymbol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GEArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gauss.new_GEArray(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getPlane(self, arg2, imag=False):
        return _gauss.GEArray_getPlane(self, arg2, imag)

    def getVector(self, arg2, imag=False):
        return _gauss.GEArray_getVector(self, arg2, imag)

    def getElement(self, arg2, imag=False):
        return _gauss.GEArray_getElement(self, arg2, imag)

    def setElement(self, arg2, arg3, imag=False):
        return _gauss.GEArray_setElement(self, arg2, arg3, imag)

    def getData(self, imag=False):
        return _gauss.GEArray_getData(self, imag)

    def getImagData(self):
        return _gauss.GEArray_getImagData(self)

    def getOrders(self):
        return _gauss.GEArray_getOrders(self)

    def getDimensions(self):
        return _gauss.GEArray_getDimensions(self)

    def size(self):
        return _gauss.GEArray_size(self)

    def toString(self):
        return _gauss.GEArray_toString(self)

    def clear(self):
        return _gauss.GEArray_clear(self)
    __swig_destroy__ = _gauss.delete_GEArray
    __del__ = lambda self: None
GEArray_swigregister = _gauss.GEArray_swigregister
GEArray_swigregister(GEArray)

class GEMatrix(GESymbol):
    __swig_setmethods__ = {}
    for _s in [GESymbol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GEMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [GESymbol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GEMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gauss.new_GEMatrix(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setElement(self, *args):
        return _gauss.GEMatrix_setElement(self, *args)

    def getElement(self, *args):
        return _gauss.GEMatrix_getElement(self, *args)

    def getData(self, imag=False):
        return _gauss.GEMatrix_getData(self, imag)

    def getImagData(self):
        return _gauss.GEMatrix_getImagData(self)

    def clear(self):
        return _gauss.GEMatrix_clear(self)

    def toString(self):
        return _gauss.GEMatrix_toString(self)
    __swig_destroy__ = _gauss.delete_GEMatrix
    __del__ = lambda self: None
GEMatrix_swigregister = _gauss.GEMatrix_swigregister
GEMatrix_swigregister(GEMatrix)

class GEString(GESymbol):
    __swig_setmethods__ = {}
    for _s in [GESymbol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GEString, name, value)
    __swig_getmethods__ = {}
    for _s in [GESymbol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GEString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gauss.new_GEString(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getData(self):
        return _gauss.GEString_getData(self)

    def setData(self, arg2):
        return _gauss.GEString_setData(self, arg2)

    def size(self):
        return _gauss.GEString_size(self)

    def clear(self):
        return _gauss.GEString_clear(self)

    def toString(self):
        return _gauss.GEString_toString(self)
    __swig_destroy__ = _gauss.delete_GEString
    __del__ = lambda self: None
GEString_swigregister = _gauss.GEString_swigregister
GEString_swigregister(GEString)

class GEStringArray(GESymbol):
    __swig_setmethods__ = {}
    for _s in [GESymbol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GEStringArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GESymbol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GEStringArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gauss.new_GEStringArray(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getElement(self, arg2, arg3):
        return _gauss.GEStringArray_getElement(self, arg2, arg3)

    def getData(self):
        return _gauss.GEStringArray_getData(self)

    def setData(self, arg2, arg3, arg4):
        return _gauss.GEStringArray_setData(self, arg2, arg3, arg4)

    def setElement(self, arg2, arg3, arg4):
        return _gauss.GEStringArray_setElement(self, arg2, arg3, arg4)

    def toString(self):
        return _gauss.GEStringArray_toString(self)

    def size(self):
        return _gauss.GEStringArray_size(self)

    def clear(self):
        return _gauss.GEStringArray_clear(self)
    __swig_destroy__ = _gauss.delete_GEStringArray
    __del__ = lambda self: None
GEStringArray_swigregister = _gauss.GEStringArray_swigregister
GEStringArray_swigregister(GEStringArray)

class GEWorkspace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GEWorkspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GEWorkspace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gauss.new_GEWorkspace(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setName(self, arg2):
        return _gauss.GEWorkspace_setName(self, arg2)

    def name(self):
        return _gauss.GEWorkspace_name(self)

    def setWorkspace(self, arg2):
        return _gauss.GEWorkspace_setWorkspace(self, arg2)

    def workspace(self):
        return _gauss.GEWorkspace_workspace(self)

    def clear(self):
        return _gauss.GEWorkspace_clear(self)
    __swig_destroy__ = _gauss.delete_GEWorkspace
    __del__ = lambda self: None
GEWorkspace_swigregister = _gauss.GEWorkspace_swigregister
GEWorkspace_swigregister(GEWorkspace)

class WorkspaceManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gauss.new_WorkspaceManager()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getCurrent(self):
        return _gauss.WorkspaceManager_getCurrent(self)

    def setCurrent(self, wh):
        return _gauss.WorkspaceManager_setCurrent(self, wh)

    def getWorkspace(self, arg2):
        return _gauss.WorkspaceManager_getWorkspace(self, arg2)

    def destroyAll(self):
        return _gauss.WorkspaceManager_destroyAll(self)

    def destroy(self, arg2):
        return _gauss.WorkspaceManager_destroy(self, arg2)

    def create(self, arg2):
        return _gauss.WorkspaceManager_create(self, arg2)

    def workspaceNames(self):
        return _gauss.WorkspaceManager_workspaceNames(self)

    def count(self):
        return _gauss.WorkspaceManager_count(self)

    def contains(self, arg2):
        return _gauss.WorkspaceManager_contains(self, arg2)

    def isValidWorkspace(self, arg2):
        return _gauss.WorkspaceManager_isValidWorkspace(self, arg2)
    __swig_destroy__ = _gauss.delete_WorkspaceManager
    __del__ = lambda self: None
WorkspaceManager_swigregister = _gauss.WorkspaceManager_swigregister
WorkspaceManager_swigregister(WorkspaceManager)

class IGEProgramOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGEProgramOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGEProgramOutput, name)
    __repr__ = _swig_repr

    def invoke(self, message):
        return _gauss.IGEProgramOutput_invoke(self, message)
    __swig_destroy__ = _gauss.delete_IGEProgramOutput
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == IGEProgramOutput:
            _self = None
        else:
            _self = self
        this = _gauss.new_IGEProgramOutput(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

        self.thisown = 0



    def __disown__(self):
        self.this.disown()
        _gauss.disown_IGEProgramOutput(self)
        return weakref_proxy(self)
IGEProgramOutput_swigregister = _gauss.IGEProgramOutput_swigregister
IGEProgramOutput_swigregister(IGEProgramOutput)

class IGEProgramFlushOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGEProgramFlushOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGEProgramFlushOutput, name)
    __repr__ = _swig_repr

    def invoke(self):
        return _gauss.IGEProgramFlushOutput_invoke(self)
    __swig_destroy__ = _gauss.delete_IGEProgramFlushOutput
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == IGEProgramFlushOutput:
            _self = None
        else:
            _self = self
        this = _gauss.new_IGEProgramFlushOutput(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

        self.thisown = 0



    def __disown__(self):
        self.this.disown()
        _gauss.disown_IGEProgramFlushOutput(self)
        return weakref_proxy(self)
IGEProgramFlushOutput_swigregister = _gauss.IGEProgramFlushOutput_swigregister
IGEProgramFlushOutput_swigregister(IGEProgramFlushOutput)

class IGEProgramInputString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGEProgramInputString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGEProgramInputString, name)
    __repr__ = _swig_repr

    def invoke(self, length):
        return _gauss.IGEProgramInputString_invoke(self, length)
    __swig_destroy__ = _gauss.delete_IGEProgramInputString
    __del__ = lambda self: None

    def setValue(self, value):
        return _gauss.IGEProgramInputString_setValue(self, value)

    def __init__(self):
        if self.__class__ == IGEProgramInputString:
            _self = None
        else:
            _self = self
        this = _gauss.new_IGEProgramInputString(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

        self.thisown = 0



    def __disown__(self):
        self.this.disown()
        _gauss.disown_IGEProgramInputString(self)
        return weakref_proxy(self)
IGEProgramInputString_swigregister = _gauss.IGEProgramInputString_swigregister
IGEProgramInputString_swigregister(IGEProgramInputString)

class IGEProgramInputChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGEProgramInputChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGEProgramInputChar, name)
    __repr__ = _swig_repr

    def invoke(self):
        return _gauss.IGEProgramInputChar_invoke(self)
    __swig_destroy__ = _gauss.delete_IGEProgramInputChar
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == IGEProgramInputChar:
            _self = None
        else:
            _self = self
        this = _gauss.new_IGEProgramInputChar(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

        self.thisown = 0



    def __disown__(self):
        self.this.disown()
        _gauss.disown_IGEProgramInputChar(self)
        return weakref_proxy(self)
IGEProgramInputChar_swigregister = _gauss.IGEProgramInputChar_swigregister
IGEProgramInputChar_swigregister(IGEProgramInputChar)

class IGEProgramInputCheck(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGEProgramInputCheck, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGEProgramInputCheck, name)
    __repr__ = _swig_repr

    def invoke(self):
        return _gauss.IGEProgramInputCheck_invoke(self)
    __swig_destroy__ = _gauss.delete_IGEProgramInputCheck
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == IGEProgramInputCheck:
            _self = None
        else:
            _self = self
        this = _gauss.new_IGEProgramInputCheck(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

        self.thisown = 0



    def __disown__(self):
        self.this.disown()
        _gauss.disown_IGEProgramInputCheck(self)
        return weakref_proxy(self)
IGEProgramInputCheck_swigregister = _gauss.IGEProgramInputCheck_swigregister
IGEProgramInputCheck_swigregister(IGEProgramInputCheck)

class GESymType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GESymType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GESymType, name)
    __repr__ = _swig_repr
    SCALAR = _gauss.GESymType_SCALAR
    SPARSE = _gauss.GESymType_SPARSE
    MATRIX = _gauss.GESymType_MATRIX
    STRING = _gauss.GESymType_STRING
    STRUCT = _gauss.GESymType_STRUCT
    PSTRUCT = _gauss.GESymType_PSTRUCT
    STRING_ARRAY = _gauss.GESymType_STRING_ARRAY
    ARRAY_GAUSS = _gauss.GESymType_ARRAY_GAUSS
    PROC = _gauss.GESymType_PROC
    OTHER = _gauss.GESymType_OTHER

    def __init__(self):
        this = _gauss.new_GESymType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gauss.delete_GESymType
    __del__ = lambda self: None
GESymType_swigregister = _gauss.GESymType_swigregister
GESymType_swigregister(GESymType)

# This file is compatible with both classic and new-style classes.


