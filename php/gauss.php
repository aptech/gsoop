<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('gauss')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_gauss.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('gauss.so')) return;
    } else {
      if (!dl('gauss.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class DoubleVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_double_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DoubleVector(); break;
		default: $this->_cPtr=new_DoubleVector($n);
		}
	}

	function size() {
		return DoubleVector_size($this->_cPtr);
	}

	function capacity() {
		return DoubleVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		DoubleVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		DoubleVector_clear($this->_cPtr);
	}

	function push($x) {
		DoubleVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return DoubleVector_is_empty($this->_cPtr);
	}

	function pop() {
		return DoubleVector_pop($this->_cPtr);
	}

	function get($i) {
		return DoubleVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		DoubleVector_set($this->_cPtr,$i,$val);
	}
}

class DoubleDoubleVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__vectorT_double_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DoubleDoubleVector(); break;
		default: $this->_cPtr=new_DoubleDoubleVector($n);
		}
	}

	function size() {
		return DoubleDoubleVector_size($this->_cPtr);
	}

	function capacity() {
		return DoubleDoubleVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		DoubleDoubleVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		DoubleDoubleVector_clear($this->_cPtr);
	}

	function push($x) {
		DoubleDoubleVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return DoubleDoubleVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=DoubleDoubleVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function get($i) {
		$r=DoubleDoubleVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function set($i,$val) {
		DoubleDoubleVector_set($this->_cPtr,$i,$val);
	}
}

class FloatVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_float_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_FloatVector(); break;
		default: $this->_cPtr=new_FloatVector($n);
		}
	}

	function size() {
		return FloatVector_size($this->_cPtr);
	}

	function capacity() {
		return FloatVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		FloatVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		FloatVector_clear($this->_cPtr);
	}

	function push($x) {
		FloatVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return FloatVector_is_empty($this->_cPtr);
	}

	function pop() {
		return FloatVector_pop($this->_cPtr);
	}

	function get($i) {
		return FloatVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		FloatVector_set($this->_cPtr,$i,$val);
	}
}

class IntVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_int_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_IntVector(); break;
		default: $this->_cPtr=new_IntVector($n);
		}
	}

	function size() {
		return IntVector_size($this->_cPtr);
	}

	function capacity() {
		return IntVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		IntVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		IntVector_clear($this->_cPtr);
	}

	function push($x) {
		IntVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return IntVector_is_empty($this->_cPtr);
	}

	function pop() {
		return IntVector_pop($this->_cPtr);
	}

	function get($i) {
		return IntVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		IntVector_set($this->_cPtr,$i,$val);
	}
}

class StringVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__string_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringVector(); break;
		default: $this->_cPtr=new_StringVector($n);
		}
	}

	function size() {
		return StringVector_size($this->_cPtr);
	}

	function capacity() {
		return StringVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		StringVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		StringVector_clear($this->_cPtr);
	}

	function push($x) {
		StringVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return StringVector_is_empty($this->_cPtr);
	}

	function pop() {
		return StringVector_pop($this->_cPtr);
	}

	function get($i) {
		return StringVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		StringVector_set($this->_cPtr,$i,$val);
	}
}

class StringStringVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__vectorT_std__string_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringStringVector(); break;
		default: $this->_cPtr=new_StringStringVector($n);
		}
	}

	function size() {
		return StringStringVector_size($this->_cPtr);
	}

	function capacity() {
		return StringStringVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		StringStringVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		StringStringVector_clear($this->_cPtr);
	}

	function push($x) {
		StringStringVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return StringStringVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=StringStringVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function get($i) {
		$r=StringStringVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function set($i,$val) {
		StringStringVector_set($this->_cPtr,$i,$val);
	}
}

class GAUSS {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($arg1=null,$isEnvVar=true) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_GAUSS') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GAUSS(); break;
		default: $this->_cPtr=new_GAUSS($arg1,$isEnvVar);
		}
	}

	function initialize() {
		return GAUSS_initialize($this->_cPtr);
	}

	function shutdown() {
		GAUSS_shutdown($this->_cPtr);
	}

	function setHome($arg1) {
		return GAUSS_setHome($this->_cPtr,$arg1);
	}

	function setHomeVar($arg1) {
		return GAUSS_setHomeVar($this->_cPtr,$arg1);
	}

	function getHome() {
		return GAUSS_getHome($this->_cPtr);
	}

	function getHomeVar() {
		return GAUSS_getHomeVar($this->_cPtr);
	}

	function getLogFile() {
		return GAUSS_getLogFile($this->_cPtr);
	}

	function setLogFile($arg1,$arg2) {
		return GAUSS_setLogFile($this->_cPtr,$arg1,$arg2);
	}

	function getLastErrorText() {
		return GAUSS_getLastErrorText($this->_cPtr);
	}

	function getErrorText($arg1) {
		return GAUSS_getErrorText($this->_cPtr,$arg1);
	}

	function getError() {
		return GAUSS_getError($this->_cPtr);
	}

	function setError($arg1) {
		GAUSS_setError($this->_cPtr,$arg1);
	}

	function createWorkspace($arg1) {
		$r=GAUSS_createWorkspace($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function destroyWorkspace($arg1) {
		return GAUSS_destroyWorkspace($this->_cPtr,$arg1);
	}

	function destroyAllWorkspaces() {
		GAUSS_destroyAllWorkspaces($this->_cPtr);
	}

	function getWorkspace($arg1) {
		$r=GAUSS_getWorkspace($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function getActiveWorkspace() {
		$r=GAUSS_getActiveWorkspace($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function setActiveWorkspace($arg1) {
		return GAUSS_setActiveWorkspace($this->_cPtr,$arg1);
	}

	function loadWorkspace($arg1) {
		$r=GAUSS_loadWorkspace($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function getWorkspaceName($arg1) {
		return GAUSS_getWorkspaceName($this->_cPtr,$arg1);
	}

	function updateWorkspaceName($arg1) {
		GAUSS_updateWorkspaceName($this->_cPtr,$arg1);
	}

	function saveWorkspace($arg1,$arg2) {
		return GAUSS_saveWorkspace($this->_cPtr,$arg1,$arg2);
	}

	function saveProgram($arg1,$arg2) {
		return GAUSS_saveProgram($this->_cPtr,$arg1,$arg2);
	}

	function translateDataloopFile($srcfile) {
		return GAUSS_translateDataloopFile($this->_cPtr,$srcfile);
	}

	function executeString($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_executeString($this->_cPtr,$arg1); break;
		default: $r=GAUSS_executeString($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function executeFile($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_executeFile($this->_cPtr,$arg1); break;
		default: $r=GAUSS_executeFile($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function executeCompiledFile($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_executeCompiledFile($this->_cPtr,$arg1); break;
		default: $r=GAUSS_executeCompiledFile($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function compileString($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_compileString($this->_cPtr,$arg1); break;
		default: $r=GAUSS_compileString($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function compileFile($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_compileFile($this->_cPtr,$arg1); break;
		default: $r=GAUSS_compileFile($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function loadCompiledFile($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_loadCompiledFile($this->_cPtr,$arg1); break;
		default: $r=GAUSS_loadCompiledFile($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function executeProgram($arg1) {
		return GAUSS_executeProgram($this->_cPtr,$arg1);
	}

	function freeProgram($arg1) {
		GAUSS_freeProgram($this->_cPtr,$arg1);
	}

	function makePathAbsolute($arg1) {
		return GAUSS_makePathAbsolute($this->_cPtr,$arg1);
	}

	function programInputString() {
		return GAUSS_programInputString($this->_cPtr);
	}

	function getSymbolType($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getSymbolType($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getSymbolType($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function getScalar($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getScalar($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getScalar($this->_cPtr,$arg1,$arg2);
		}
		return $r;
	}

	function getMatrix($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getMatrix($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getMatrix($this->_cPtr,$arg1,$arg2);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEMatrix': return new GEMatrix($r);
		default: return new GEMatrix($r);
		}
	}

	function getMatrixAndClear($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getMatrixAndClear($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getMatrixAndClear($this->_cPtr,$arg1,$arg2);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEMatrix': return new GEMatrix($r);
		default: return new GEMatrix($r);
		}
	}

	function getArray($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getArray($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getArray($this->_cPtr,$arg1,$arg2);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEArray': return new GEArray($r);
		default: return new GEArray($r);
		}
	}

	function getArrayAndClear($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getArrayAndClear($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getArrayAndClear($this->_cPtr,$arg1,$arg2);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEArray': return new GEArray($r);
		default: return new GEArray($r);
		}
	}

	function getString($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getString($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getString($this->_cPtr,$arg1,$arg2);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEString': return new GEString($r);
		default: return new GEString($r);
		}
	}

	function getStringArray($arg1,$arg2=null) {
		switch (func_num_args()) {
		case 1: $r=GAUSS_getStringArray($this->_cPtr,$arg1); break;
		default: $r=GAUSS_getStringArray($this->_cPtr,$arg1,$arg2);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEStringArray': return new GEStringArray($r);
		default: return new GEStringArray($r);
		}
	}

	function setSymbol($arg1,$arg2,$arg3=null) {
		switch (func_num_args()) {
		case 2: $r=GAUSS_setSymbol($this->_cPtr,$arg1,$arg2); break;
		default: $r=GAUSS_setSymbol($this->_cPtr,$arg1,$arg2,$arg3);
		}
		return $r;
	}

	function isMissingValue($arg1) {
		return GAUSS_isMissingValue($this->_cPtr,$arg1);
	}

	static function kMissingValue() {
		if (func_num_args()) {
			GAUSS_kMissingValue_set(func_get_arg(0));
			return;
		}

		return GAUSS_kMissingValue_get();
	}

	static function internalHookOutput($output) {
		GAUSS_internalHookOutput($output);
	}

	static function internalHookError($output) {
		GAUSS_internalHookError($output);
	}

	static function internalHookFlush() {
		GAUSS_internalHookFlush();
	}

	static function internalHookInputString($buf,$len) {
		return GAUSS_internalHookInputString($buf,$len);
	}

	static function internalHookInputChar() {
		return GAUSS_internalHookInputChar();
	}

	static function internalHookInputBlockingChar() {
		return GAUSS_internalHookInputBlockingChar();
	}

	static function internalHookInputCheck() {
		return GAUSS_internalHookInputCheck();
	}

	function setProgramOutputAll($func) {
		GAUSS_setProgramOutputAll($this->_cPtr,$func);
	}

	function setProgramOutput($func) {
		GAUSS_setProgramOutput($this->_cPtr,$func);
	}

	function setProgramErrorOutput($func) {
		GAUSS_setProgramErrorOutput($this->_cPtr,$func);
	}

	function setProgramFlushOutput($func) {
		GAUSS_setProgramFlushOutput($this->_cPtr,$func);
	}

	function setProgramInputString($func) {
		GAUSS_setProgramInputString($this->_cPtr,$func);
	}

	function setProgramInputChar($func) {
		GAUSS_setProgramInputChar($this->_cPtr,$func);
	}

	function setProgramInputCharBlocking($func) {
		GAUSS_setProgramInputCharBlocking($this->_cPtr,$func);
	}

	function setProgramInputCheck($func) {
		GAUSS_setProgramInputCheck($this->_cPtr,$func);
	}

	static function outputFunc_() {
		if (func_num_args()) {
			GAUSS_outputFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_outputFunc__get();
		$this->_cPtr = $r;
		return $this;
	}

	static function errorFunc_() {
		if (func_num_args()) {
			GAUSS_errorFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_errorFunc__get();
		$this->_cPtr = $r;
		return $this;
	}

	static function flushFunc_() {
		if (func_num_args()) {
			GAUSS_flushFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_flushFunc__get();
		$this->_cPtr = $r;
		return $this;
	}

	static function inputStringFunc_() {
		if (func_num_args()) {
			GAUSS_inputStringFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_inputStringFunc__get();
		$this->_cPtr = $r;
		return $this;
	}

	static function inputCharFunc_() {
		if (func_num_args()) {
			GAUSS_inputCharFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_inputCharFunc__get();
		$this->_cPtr = $r;
		return $this;
	}

	static function inputBlockingCharFunc_() {
		if (func_num_args()) {
			GAUSS_inputBlockingCharFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_inputBlockingCharFunc__get();
		$this->_cPtr = $r;
		return $this;
	}

	static function inputCheckFunc_() {
		if (func_num_args()) {
			GAUSS_inputCheckFunc__set(func_get_arg(0));
			return;
		}

		$r=GAUSS_inputCheckFunc__get();
		$this->_cPtr = $r;
		return $this;
	}
}

class GESymbol {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function getRows() {
		return GESymbol_getRows($this->_cPtr);
	}

	function getCols() {
		return GESymbol_getCols($this->_cPtr);
	}

	function isComplex() {
		return GESymbol_isComplex($this->_cPtr);
	}

	function size() {
		return GESymbol_size($this->_cPtr);
	}

	function clear() {
		GESymbol_clear($this->_cPtr);
	}

	function toString() {
		return GESymbol_toString($this->_cPtr);
	}

	function __toString() {
		return GESymbol___toString($this->_cPtr);
	}
}

class GEArray extends GESymbol {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		GESymbol::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return GESymbol::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return GESymbol::__get($var);
	}

	function __construct($arg1=null,$arg2=null,$complex=false) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_GEArray') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GEArray(); break;
		case 1: $this->_cPtr=new_GEArray($arg1); break;
		default: $this->_cPtr=new_GEArray($arg1,$arg2,$complex);
		}
	}

	function getPlane($arg1,$imag=false) {
		$r=GEArray_getPlane($this->_cPtr,$arg1,$imag);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_GEMatrix': return new GEMatrix($r);
		default: return new GEMatrix($r);
		}
	}

	function getVector($arg1,$imag=false) {
		$r=GEArray_getVector($this->_cPtr,$arg1,$imag);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function getElement($arg1,$imag=false) {
		return GEArray_getElement($this->_cPtr,$arg1,$imag);
	}

	function setElement($arg1,$arg2,$imag=false) {
		return GEArray_setElement($this->_cPtr,$arg1,$arg2,$imag);
	}

	function getData($imag=false) {
		$r=GEArray_getData($this->_cPtr,$imag);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function getImagData() {
		$r=GEArray_getImagData($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function getOrders() {
		$r=GEArray_getOrders($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntVector($r);
		}
		return $r;
	}

	function getDimensions() {
		return GEArray_getDimensions($this->_cPtr);
	}

	function size() {
		return GEArray_size($this->_cPtr);
	}

	function toString() {
		return GEArray_toString($this->_cPtr);
	}

	function clear() {
		GEArray_clear($this->_cPtr);
	}
}

class GEMatrix extends GESymbol {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		GESymbol::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return GESymbol::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return GESymbol::__get($var);
	}

	function __construct($arg1=null,$rows=null,$cols_or_rows=null,$complex_or_cols=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_GEMatrix') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GEMatrix(); break;
		case 1: $this->_cPtr=new_GEMatrix($arg1); break;
		case 2: $this->_cPtr=new_GEMatrix($arg1,$rows); break;
		case 3: $this->_cPtr=new_GEMatrix($arg1,$rows,$cols_or_rows); break;
		default: $this->_cPtr=new_GEMatrix($arg1,$rows,$cols_or_rows,$complex_or_cols);
		}
	}

	function setElement($arg1,$imag_or_row=null,$col=null,$imag=null) {
		switch (func_num_args()) {
		case 1: $r=GEMatrix_setElement($this->_cPtr,$arg1); break;
		case 2: $r=GEMatrix_setElement($this->_cPtr,$arg1,$imag_or_row); break;
		case 3: $r=GEMatrix_setElement($this->_cPtr,$arg1,$imag_or_row,$col); break;
		default: $r=GEMatrix_setElement($this->_cPtr,$arg1,$imag_or_row,$col,$imag);
		}
		return $r;
	}

	function getElement($imag_or_row=null,$col=null,$imag=null) {
		switch (func_num_args()) {
		case 0: $r=GEMatrix_getElement($this->_cPtr); break;
		case 1: $r=GEMatrix_getElement($this->_cPtr,$imag_or_row); break;
		case 2: $r=GEMatrix_getElement($this->_cPtr,$imag_or_row,$col); break;
		default: $r=GEMatrix_getElement($this->_cPtr,$imag_or_row,$col,$imag);
		}
		return $r;
	}

	function getData($imag=false) {
		$r=GEMatrix_getData($this->_cPtr,$imag);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function getImagData() {
		$r=GEMatrix_getImagData($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function clear() {
		GEMatrix_clear($this->_cPtr);
	}

	function toString() {
		return GEMatrix_toString($this->_cPtr);
	}
}

class GEString extends GESymbol {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		GESymbol::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return GESymbol::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return GESymbol::__get($var);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_GEString') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GEString(); break;
		default: $this->_cPtr=new_GEString($arg1);
		}
	}

	function getData() {
		return GEString_getData($this->_cPtr);
	}

	function setData($arg1) {
		GEString_setData($this->_cPtr,$arg1);
	}

	function size() {
		return GEString_size($this->_cPtr);
	}

	function clear() {
		GEString_clear($this->_cPtr);
	}

	function toString() {
		return GEString_toString($this->_cPtr);
	}
}

class GEStringArray extends GESymbol {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		GESymbol::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return GESymbol::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return GESymbol::__get($var);
	}

	function __construct($arg1=null,$arg2=null,$arg3=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_GEStringArray') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GEStringArray(); break;
		case 1: $this->_cPtr=new_GEStringArray($arg1); break;
		case 2: $this->_cPtr=new_GEStringArray($arg1,$arg2); break;
		default: $this->_cPtr=new_GEStringArray($arg1,$arg2,$arg3);
		}
	}

	function getElement($arg1,$arg2) {
		return GEStringArray_getElement($this->_cPtr,$arg1,$arg2);
	}

	function getData() {
		$r=GEStringArray_getData($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function setData($arg1,$arg2,$arg3) {
		GEStringArray_setData($this->_cPtr,$arg1,$arg2,$arg3);
	}

	function setElement($arg1,$arg2,$arg3) {
		return GEStringArray_setElement($this->_cPtr,$arg1,$arg2,$arg3);
	}

	function toString() {
		return GEStringArray_toString($this->_cPtr);
	}

	function size() {
		return GEStringArray_size($this->_cPtr);
	}

	function clear() {
		GEStringArray_clear($this->_cPtr);
	}
}

class GEWorkspace {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($arg1,$arg2=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_GEWorkspace') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_GEWorkspace($arg1); break;
		default: $this->_cPtr=new_GEWorkspace($arg1,$arg2);
		}
	}

	function setName($arg1) {
		GEWorkspace_setName($this->_cPtr,$arg1);
	}

	function name() {
		return GEWorkspace_name($this->_cPtr);
	}

	function setWorkspace($arg1) {
		GEWorkspace_setWorkspace($this->_cPtr,$arg1);
	}

	function workspace() {
		return GEWorkspace_workspace($this->_cPtr);
	}

	function clear() {
		GEWorkspace_clear($this->_cPtr);
	}
}

class WorkspaceManager {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_WorkspaceManager') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_WorkspaceManager();
	}

	function getCurrent() {
		$r=WorkspaceManager_getCurrent($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function setCurrent($wh) {
		return WorkspaceManager_setCurrent($this->_cPtr,$wh);
	}

	function getWorkspace($arg1) {
		$r=WorkspaceManager_getWorkspace($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function destroyAll() {
		WorkspaceManager_destroyAll($this->_cPtr);
	}

	function destroy($arg1) {
		return WorkspaceManager_destroy($this->_cPtr,$arg1);
	}

	function create($arg1) {
		$r=WorkspaceManager_create($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new GEWorkspace($r);
		}
		return $r;
	}

	function workspaceNames() {
		$r=WorkspaceManager_workspaceNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function count() {
		return WorkspaceManager_count($this->_cPtr);
	}

	function contains($arg1) {
		return WorkspaceManager_contains($this->_cPtr,$arg1);
	}

	function isValidWorkspace($arg1) {
		return WorkspaceManager_isValidWorkspace($this->_cPtr,$arg1);
	}
}

abstract class IGEProgramOutput {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function invoke($message) {
		IGEProgramOutput_invoke($this->_cPtr,$message);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_IGEProgramOutput') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'IGEProgramOutput') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_IGEProgramOutput($_this);
	}
}

abstract class IGEProgramFlushOutput {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function invoke() {
		IGEProgramFlushOutput_invoke($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_IGEProgramFlushOutput') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'IGEProgramFlushOutput') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_IGEProgramFlushOutput($_this);
	}
}

abstract class IGEProgramInputString {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function invoke($length) {
		IGEProgramInputString_invoke($this->_cPtr,$length);
	}

	function setValue($value) {
		IGEProgramInputString_setValue($this->_cPtr,$value);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_IGEProgramInputString') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'IGEProgramInputString') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_IGEProgramInputString($_this);
	}
}

abstract class IGEProgramInputChar {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function invoke() {
		return IGEProgramInputChar_invoke($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_IGEProgramInputChar') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'IGEProgramInputChar') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_IGEProgramInputChar($_this);
	}
}

abstract class IGEProgramInputCheck {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function invoke() {
		return IGEProgramInputCheck_invoke($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_IGEProgramInputCheck') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'IGEProgramInputCheck') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_IGEProgramInputCheck($_this);
	}
}

class GESymType {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_gauss_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_gauss_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const SCALAR = 16;

	const SPARSE = 38;

	const MATRIX = 6;

	const STRING = 13;

	const STRUCT = 19;

	const PSTRUCT = 23;

	const STRING_ARRAY = 15;

	const ARRAY_GAUSS = 17;

	const PROC = 8;

	const OTHER = 99;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GESymType') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GESymType();
	}
}


?>
